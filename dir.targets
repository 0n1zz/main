<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" InitialTargets="_RestoreBuildToolsWrapper" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Needed to avoid the IntialTargets from having an Output which ends up getting
    added to the output references when you have a project to project reference.
  -->
  <Target Name="_RestoreBuildToolsWrapper" DependsOnTargets="_DisplayBuildInfo; _RestoreBuildTools" />

  <Target Name="_DisplayBuildInfo">
      <!-- Cannot do both MonoBuild and NetCoreBuild -->
      <Error Condition="'$(MonoBuild)' == 'true' and '$(NetCoreBuild)' == 'true'"
             Text="Cannot do both Mono and NetCore build."
      />

    <Message Importance="High" Text="Build '$(MSBuildProjectFile)' into binary directory '$(BaseOutputPathWithConfig)'" />
  </Target>

  <!--
    TODO: The compilers are copied in DeployDependencies based on the
          runtime.project.json. Use non-existent AfterTargets to disable
          this target. It should be removed when we are 100% sure.
  -->
  <Target Name="_CopyCompilers"
          AfterTargets="_RestoreBuildToolsWrapper1"
          Condition="Exists($(BuildToolsSemaphore)) and '$(NetCoreBuild)' != 'true'">
    <ItemGroup>
      <CompilerToolsFiles Include="$(CompilerToolsDir)\*" />
    </ItemGroup>

    <Copy
      SourceFiles="@(CompilerToolsFiles)"
      DestinationFolder="$(OutputPath)"
      SkipUnchangedFiles="true"
    />
  </Target>

  <Target Name="_PrepareNonWindowsRuntime"
          AfterTargets="_CopyCompilers"
          Condition="'$(OsEnvironment)'!='Windows_NT' and Exists($(OutputPath))"
  >

    <Exec Command="find '$(OutputPath)' -name &quot;*.exe&quot; -exec chmod &quot;+x&quot; '{}' ';'" />
    <Exec Command="find '$(OutputPath)' -name &quot;*&quot; -exec chmod &quot;+r&quot; '{}' ';'" />

  </Target>

  <!-- Provide default targets which can be hooked onto or overridden as necessary -->
  <Target Name="BuildAndTest" DependsOnTargets="Build;Test" />
  <Target Name="RebuildAndTest" DependsOnTargets="Rebuild;Test" />
  <Target Name="Test" />

  <Target Name="EnsureDependenciesDeployed"
          AfterTargets="Build">
    <MSBuild Projects="$(RepoRoot)\targets\DeployDependencies.proj"
             Targets="DeployDependencies"
             BuildInParallel="true"
             Condition="'$(OsEnvironment)'=='Windows_NT'"
    />
    
    <MSBuild Projects="$(RepoRoot)\targets\LinuxDeployDependencies.proj"
             Targets="DeployDependencies"
             BuildInParallel="true"
             Condition="'$(OsEnvironment)'!='Windows_NT'"
    />
  </Target>

  <Target Name="EnsurePrerequisitesCopied"
          Condition="'$(IsTestProject)' == 'true'">
    <MSBuild Projects="$(RepoRoot)\targets\CopyTestPrerequisites.proj"
             Targets="CopyPrerequisites"
             BuildInParallel="true" />
  </Target>

  <!-- Respect the traits set up by PlatformSpecific attribute. -->
  <PropertyGroup>
    <XunitOptions Condition="'$(OS)'=='Windows_NT'">$(XunitOptions) -notrait category=nonwindowstests</XunitOptions>
    <XunitOptions Condition="'$(OS)'=='Unix'">$(XunitOptions) -notrait category=nonlinuxtests</XunitOptions>
    <XunitOptions Condition="'$(OS)'=='OSX'">$(XunitOptions) -notrait category=nonosxtests</XunitOptions>
    <XunitOptions Condition="'$(OS)'=='OSX' and '$(NetCoreBuild)'=='true'">-notrait category=nonosxtests -notrait category=netcore-osx-failing</XunitOptions>
    <XunitOptions Condition="'$(OS)'=='FreeBSD'">$(XunitOptions) -notrait category=nonfreebsdtests</XunitOptions>

    <XunitOptions Condition="'$(OS)'=='OSX' and '$(MonoBuild)' == 'true'">$(XunitOptions) -notrait category=mono-osx-failing</XunitOptions>
  </PropertyGroup>

  <Target Name="CopyBuildOutputToDeploymentDirectories">
    <ItemGroup>
      <OutputItems Include="$(OutputPath)\**\*.*"/>
    </ItemGroup>

    <Copy SourceFiles="@(OutputItems)"
          DestinationFolder="$(DeploymentDir)\%(RecursiveDir)"
          SkipUnchangedFiles="true"
          />

    <Copy SourceFiles="@(OutputItems)"
          DestinationFolder="$(TestDeploymentDir)\%(RecursiveDir)"
          SkipUnchangedFiles="true"
          />
  </Target>

  <Target Name="DeployForTargetRuntime"
          AfterTargets="Build"
          DependsOnTargets="CopyBuildOutputToDeploymentDirectories;EnsureDependenciesDeployed">

  </Target>

  <Target Name="Test"
          DependsOnTargets="Build;CopyBuildOutputToDeploymentDirectories;EnsureDependenciesDeployed;EnsurePrerequisitesCopied"
          Condition="'$(IsTestProject)' == 'true'">

    <ItemGroup>
      <AssemblyUnderTest Include="@(MainAssembly->'$(TestDeploymentDir)\%(Filename)%(Extension)')"/>
    </ItemGroup>

    <!-- Exec the console runner instead of using the MSBuild runner,
         because our tests have dependencies on being run as x86. -->
    <!-- Noshadow because our assemblies do not pass the checks for it
         (due to open source signing). -->
    <!-- No parallel execution because most of our tests do bad things
         with state.  They were passing because MSTest was serial. -->

    <!-- Run tests on the full framework -->
    <Exec Command="$(ToolPackagesDir)\xunit.runner.console.$(XunitVersion)\tools\xunit.console.x86.exe @(AssemblyUnderTest, ' ') $(XunitOptions) -noshadow -parallel none -xml %(AssemblyUnderTest.FullPath)_TestResults.xml -html %(AssemblyUnderTest.FullPath)_TestResults.html > %(AssemblyUnderTest.FullPath)_stdout.txt"
          Condition="'$(NetCoreBuild)' != 'true'" />

    <!-- Run tests using coreclr.  Ignore warnings/errors generated by tests to stderr. -->
    <Exec Command="$(TestDeploymentDir)corerun $(TestDeploymentDir)xunit.console.netcore.exe @(AssemblyUnderTest, ' ') $(XunitOptions) -noshadow -parallel none -notrait &quot;CrashesOnNetCore=true&quot; -xml %(AssemblyUnderTest.FullPath)_core_TestResults.xml $(XunitOptions) > %(AssemblyUnderTest.FullPath)_core_stdout.txt"
          IgnoreStandardErrorWarningFormat="true"
          Condition="'$(NetCoreBuild)' == 'true'" />
  </Target>

  <Target Name="EnsureSDKTargetPresent"
          BeforeTargets="_DisplayBuildInfo"
          Condition="'$(NetCoreBuild)' != 'true' and '$(OsEnvironment)'=='Windows_NT'">
    <Error Condition="!Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\Microsoft.NuGet.ImportAfter.targets')" 
      Text="File not found: '$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.targets\ImportAfter\Microsoft.NuGet.ImportAfter.targets'. This is a file generated by the Visual Studio Windows SDK plugin that MSBuild depends on. Please install the plugin. Reference: https://github.com/Microsoft/msbuild/wiki/Building+Testing+and+Debugging" />
  </Target>
  
  <Import Project="$(NuGetConfigDir)\packageLoad.targets" />
</Project>
