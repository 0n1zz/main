<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" InitialTargets="_RestoreBuildTools" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!--
    Contains targets to do NuGet packages. The following tasks need to be performed:
        Parameters:
          NuGetConfigDir         - this directory may contain the following files:
                                   NuGet.Config - configuration file
                                   packages.config - old-facioned way to installed packages
                                   packages.Linux.config - old-facioned way to install packages for Linux
                                   packages.Windows_NT.config - old-facioned way to install packages for Windows
                                   project.json - new way to install packages
          NuGetDir               - location to install packages
          SolutionFile           - if set, pass to NuGet.exe to restore everything for the solution
          SolutionRoot           - if SolutionFile is not set and this is set, process all project.json
                                   files under this directory. Excludes project.json in NuGetConfigDir.
          InstallationDependency - list of files that, when changed, need to cause reinstall
          BuildToolsSemaphore    - Created when build tools are restored
        1. Downloads NuGet.exe
        2. Use NuGet.exe to process packages.*.config and download packages it specifies into $(NuGetDir)
        3. Handle project.json installation. This allows loading specific runtime
        4. Handle the solution file if given via the $(SolutionFile)
        5. Handle project.json using dnu instead of NuGet.exe if the solution file is not provided
  -->

  <!-- These properties are related to NuGet -->
  <PropertyGroup>
    <NuGetToolPath Condition="'$(NuGetToolPath)'==''">$([System.IO.Path]::Combine($(NuGetDir), "NuGet.exe"))</NuGetToolPath>
    <NuGetConfigFile>$([System.IO.Path]::Combine($(NuGetConfigDir),"NuGet.Config"))</NuGetConfigFile>
    <NuGetPackagesFile>$([System.IO.Path]::Combine($(NuGetConfigDir),"packages.config"))</NuGetPackagesFile>
    <NuGetPackagesFileOSSpecific>$([System.IO.Path]::Combine($(NuGetConfigDir),"packages.$(OsEnvironment).config"))</NuGetPackagesFileOSSpecific>
    <NuGetProjectJsonFile>$([System.IO.Path]::Combine($(NuGetConfigDir),"project.json"))</NuGetProjectJsonFile>
    <NuGetProjectLockJsonFile>$([System.IO.Path]::Combine($(NuGetConfigDir),"project.lock.json"))</NuGetProjectLockJsonFile>
    <NuGetCommonOptions>-Verbosity detailed</NuGetCommonOptions>
    <NuGetPackageInstallOptions>-OutputDirectory &quot;$(NuGetDir.TrimEnd('\').TrimEnd('\'))&quot;</NuGetPackageInstallOptions>
    <NuGetRestoreCommand>$(NuGetToolPath) restore $(NuGetCommonOptions)</NuGetRestoreCommand>
    <NuGetInstallCommand>$(NuGetToolPath) install $(NuGetCommonOptions)</NuGetInstallCommand>
    <SolutionSemaphore>$(NuGetDir)Solution.semaphore</SolutionSemaphore>
    <NugetDownloadURL>https://dist.nuget.org/win-x86-commandline/v3.2.0/nuget.exe</NugetDownloadURL>
    <DownloadCommand Condition="'$(OsEnvironment)'=='Windows_NT'">powershell -noprofile -nologo -command "(new-object System.Net.WebClient).DownloadFile('$(NugetDownloadURL)', '$(NuGetToolPath)')"</DownloadCommand>
    <DownloadCommand Condition="'$(OsEnvironment)'!='Windows_NT'">curl -sSL --create-dirs -o $(NuGetToolPath) $(NugetDownloadURL)</DownloadCommand>
    <BuildToolsSemaphore>$(NuGetDir)BuildTools.semaphore</BuildToolsSemaphore>
  </PropertyGroup>

  <!-- These are properties for the dnu -->
  <PropertyGroup>
    <PackagesCache Condition="'$(OsEnvironment)'=='Windows_NT'">$([System.IO.Path]::Combine($(USERPROFILE), '.nuget', 'packages'))</PackagesCache>
    <PackagesCache Condition="'$(OsEnvironment)'!='Windows_NT'">$([System.IO.Path]::Combine($(HOME), '.nuget', 'packages'))</PackagesCache>
    <SetDnxPackages Condition="'$(OsEnvironment)'=='Windows_NT'">set DNX_PACKAGES=$(PackagesCache) &amp;</SetDnxPackages>
    <SetDnxPackages Condition="'$(OsEnvironment)'!='Windows_NT'">export DNX_PACKAGES=$(PackagesCache) ;</SetDnxPackages>
    <DnuRestoreCommand>$(SetDnxPackages) $(DnuToolPath) restore</DnuRestoreCommand>
  </PropertyGroup>

  <ItemGroup>
     <ProjectJsonFile Include="$(SolutionRoot)**\project.json" Exclude="$(NuGetConfigDir)\project.json" />
     <ProjectJsonFile Include="$(SolutionRoot)**\project.json" />
  </ItemGroup>

  <!-- Restore NuGet.exe and use it to process Nuget.config. -->
  <Target Name="_RestoreBuildToolsNugetConfig"
          Inputs="$(GlobalPropertiesFile);$(NuGetPackagesFile)"
          Outputs="$(BuildToolsSemaphore);$(NuGetToolPath)"
          Condition="Exists('$(NuGetPackagesFile)')">
    <Message Importance="High" Text="Restoring build tools..." />

    <MakeDir Directories="$(NuGetDir)"
             Condition="!Exists('$(NuGetDir)')" />

    <!-- Download NuGet.exe -->
    <Exec Command="$(DownloadCommand)" Condition="!Exists('$(NuGetToolPath)')" />

    <!-- Restore build tools using packages.config if it exists -->
    <Exec Condition="Exists('$(NuGetPackagesFile)')" Command="$(NugetInstallCommand) $(NuGetPackageInstallOptions) &quot;$(NuGetPackagesFile)&quot;" />
    <Exec Condition="Exists('$(NuGetPackagesFileOSSpecific)')" Command="$(NugetInstallCommand) $(NuGetPackageInstallOptions) &quot;$(NuGetPackagesFileOSSpecific)&quot;" />
    <Error Condition="'$(ErrorIfBuildToolsRestoredFromIndividualProject)'=='true'"
           Text="The build tools package was just restored and so we cannot continue the build of an individual project because targets from the build tools package were not able to be imported. Please retry the build the individual project again." />

  </Target>

  <Target Name="_RestoreGlobalProjectJsonReferences"
          Inputs="$(NuGetProjectJsonFile);$(NuGetProjectLockJsonFile);$(GlobalPropertiesFile)"
          Outputs="$(NuGetProjectLockJsonFile);$(BuildToolsSemaphore)"
  >

    <!-- Properties to restore the test host -->
    <PropertyGroup>
      <TestHostVersion>1.0.0-beta-23318</TestHostVersion>
      <TestHostRuntime>Ubuntu.14.04-x64</TestHostRuntime>
      <HostRuntimeDir>$(PackagesDir)/runtime.$(TestHostRuntime).Microsoft.NETCore.TestHost/$(TestHostVersion)/runtimes/$(TestHostRuntime)/native/CoreRun</HostRuntimeDir>
    </PropertyGroup>
    
    <!-- Restore tools -->
    <Exec Condition="Exists($(DnuRestoreCommand))"
          Command="$(DnuRestoreCommand) &quot;$(NuGetConfigDir)&quot; --packages &quot;$(PackagesDir.TrimEnd('\').TrimEnd('\'))&quot; --quiet" />
    
    <!-- Copy the the runner app to the binary directory -->
    <Copy Condition="'$(OsEnvironment)'=='Unix' and Exists('$(HostRuntimeDir)')" SourceFiles="$(HostRuntimeDir)" DestinationFiles="$(OutputPath)/CoreRun" SkipUnchangedFiles="true" />

  </Target>

  <!--
    All work is done in the dependent targets
  -->
  <Target Name="_RestoreGlobalReferences" DependsOnTargets="_RestoreBuildToolsNugetConfig; _RestoreGlobalProjectJsonReferences">
    <!--
      Touch our semaphore file to ensure Inputs/Outputs comparison for this target will show that we're up to date.
      Ignore failures in the unlikely, but possible, event that we hit this from two projects simultaneously.
    -->
    <Touch Files="$(BuildToolsSemaphore)"
           ContinueOnError="WarnAndContinue"
           AlwaysCreate="true"
           ForceTouch="true" />

  </Target>

  <!-- Restore everything based on a solution file -->
  <Target Name="_RestoreSolution"
          Inputs="$(SolutionFile)"
          Outputs="$(SolutionSemaphore)"
          Condition="'$(SolutionFile)'!='' and Exists('$(SolutionFile)')" 
  >
    <Exec Command="$(NugetRestoreCommand)  $(NuGetPackageInstallOptions) &quot;$(SolutionFile)&quot;" StandardOutputImportance="Low" />

    <!--
      Touch our semaphore file to ensure Inputs/Outputs comparison for this target will show that we're up to date.
      Ignore failures in the unlikely, but possible, event that we hit this from two projects simultaneously.
    -->
    <Touch Files="$(SolutionSemaphore)"
           ContinueOnError="WarnAndContinue"
           AlwaysCreate="true"
           ForceTouch="true" />
  </Target>
    
  <Target Name="_RestoreDnuProjectJsonReferences"
          Inputs="@(ProjectJsonFile)"
          Outputs="%(ProjectJsonFile.RootDir)%(ProjectJsonFile.Directory)project.lock.json"
          AfterTargets="_RestoreGlobalReferences"
          Condition="('$(SolutionFile)'=='' or !Exists('$(SolutionFile)')) and '$(OsEnvironment)'=='Unix'"  >
    <PropertyGroup>
      <ProjectDirectory>%(ProjectJsonFile.RootDir)%(ProjectJsonFile.Directory)</ProjectDirectory>
    </PropertyGroup>

    <Message Importance="High" Text="Restoring in $(ProjectDirectory)" />

    <!-- Restore packages for this directory -->
    <Exec Command="$(DnuRestoreCommand) &quot;$(ProjectDirectory.TrimEnd('\').TrimEnd('\'))&quot; --quiet" />
  </Target>

  <!--
     Call all targets:
       _RestoreBuildToolsNugetConfig - download NuGet.exe and restore packages via packages.config
       _RestoreSolution - If solution file is provided, use it to restore all packages of projects
       _RestoreDnuProjectJsonReferences - Without solution, use dnu and process all project.json files
  -->
  <Target Name="_RestoreBuildTools" DependsOnTargets="_RestoreGlobalReferences" />

</Project>
